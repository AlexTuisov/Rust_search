fn heuristic(problem: &FarmProblem, state: &State) -> f64 {
    let mut threshold_deficit: f64 = 0.0;
    let mut weighted_sum: f64 = 0.0;

    // Calculate threshold deficit
    for (farm, &threshold) in &problem.goal_thresholds {
        if let Some(&x_value) = state.x_values.get(farm) {
            if x_value < threshold {
                threshold_deficit += (threshold - x_value) as f64;
            }
        }
    }

    // Calculate current weighted sum
    for (farm, &weight) in &problem.weighted_sum_goal.weights {
        if let Some(&x_value) = state.x_values.get(farm) {
            weighted_sum += (x_value as f64) * (weight as f64 / WeightedSumGoal::SCALE_FACTOR as f64);
        }
    }

    // Calculate weighted sum deficit
    let weighted_sum_deficit = if weighted_sum < (problem.weighted_sum_goal.threshold as f64 / WeightedSumGoal::SCALE_FACTOR as f64) {
        (problem.weighted_sum_goal.threshold as f64 / WeightedSumGoal::SCALE_FACTOR as f64) - weighted_sum
    } else {
        0.0
    };

    // Combine both deficits to form the heuristic
    let alpha = 1.0; // Tune these parameters based on empirical testing
    let beta = 1.0;
    alpha * threshold_deficit + beta * weighted_sum_deficit
}
